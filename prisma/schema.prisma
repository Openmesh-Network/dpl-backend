generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model Task {
  id String @id @default(uuid())

  taskId String  @unique //The id of the task onchain

  status String? //The task status -> 0, 1, 2 - ['open', 'active', 'completed']

  type String? @default("Individual") //the type of the task -> individual or group

  skills String[] @default([]) //the skills of this task. ex: Frontend, Backend, Solidity

  skillsSearch String? //parameter mandatory to execute case insensitive searchs on the database - additional paramater to facilitate the searchs on database

  departament String?   //the departament of the task

  deadline String? //the task deadline in Unix timestamp

  description String? //task desc

  title String? //task title

  file String? //The file hash on ipfs (if its got any file linked to the task)

  links String[] //["{"title": "My video","url": "https://www.youtube.com/watch?v=zizonToFXDs"}"]

  applications String @default("[]") //A stringified array opf applications for the task -> struct OffChainApplication {address applicant; bool accepted; Reward[] reward;}

  payments Payment[]
  Application Application[]
  Submission Submission[]

  estimatedBudget String @default("0") //getting the value from the tokens we return the estimated budget in USD.

  contributorsNeeded String @default("1") //number of contributors need

  contributors String[] //["{"address": "0xa..."}"]

  executor String? //If the task was taken (application accepted and etc), who is the address that is in charge of doing the task

  projectLength String @default("Less than 1 week") //How much time is estimated to complete the task 

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("task")
}

model TaskDraft {
  id String @id @default(uuid())

  proposalId String  @unique //The id of the task draft onchain

  status String? //The task status -> 0, 1 - ['open', 'closed']

  type String? @default("Individual") //the type of the task -> individual or group

  skills String[] @default([]) //the skills of this task. ex: Frontend, Backend, Solidity

  skillsSearch String? //parameter mandatory to execute case insensitive searchs on the database - additional paramater to facilitate the searchs on database

  departament String?   //the departament of the task

  deadline String? //the task deadline in Unix timestamp

  description String? //task desc

  title String? //task title

  file String? //The file hash on ipfs (if its got any file linked to the task)

  links String[] //["{"title": "My video","url": "https://www.youtube.com/watch?v=zizonToFXDs"}"]

  payments PaymentTaskDraft[]

  estimatedBudget String @default("0") //getting the value from the tokens we return the estimated budget in USD.

  contributorsNeeded String @default("1") //number of contributors need

  contributors String[] //["{"address": "0xa..."}"]

  executor String? //If the task was taken (application accepted and etc), who is the address that is in charge of doing the task

  projectLength String @default("Less than 1 week") //How much time is estimated to complete the task 

  startDate String? //the task draft start date of voting in Unix timestamp
  endDate String? //the task draft  end date of voting in Unix timestamp
  aragonMetadata String?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("taskDraft")
}

model Departament {
  id String @id @default(uuid())

  name String?  @unique //The name of the departament

  addressTaskDrafts String? //The address of the task draft contract -> TaskDrafts.sol

  addressDAO String? //The address of the DAO contract -> IDAO.sol

  addressTokenListGovernance String? //The address of the tokenListGovernance contract -> TokenListGovernance.sol

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("departament")
}


model PaymentTaskDraft {
    id String @id @default(uuid())

    tokenContract String //the token contract of the payment task
    amount String //The amount
    decimals String //Decimals of the smart-contract token

    proposalId String  
    task   TaskDraft  @relation(fields: [proposalId], references: [id])

    createdAt    DateTime  @default(now())
    updatedAt    DateTime? @updatedAt

    @@map("paymentTaskDraft")
}

model Payment {
    id String @id @default(uuid())

    tokenContract String //the token contract of the payment task
    amount String //The amount
    decimals String //Decimals of the smart-contract token

    taskId String  
    task   Task  @relation(fields: [taskId], references: [id])

    createdAt    DateTime  @default(now())
    updatedAt    DateTime? @updatedAt

    @@map("payment")
}

model Application {
    id String @id @default(uuid())

    applicationId String //Application id onchain
    metadata String //The metadata hash
    reward  String[] //Rewards: struct Reward {bool nextToken; address to; uint88 amount;}
    proposer String //Proposer
    applicant String //Applicant

    accepted Boolean @default(false) //If the application was accepted
    taken    Boolean @default(false) //After the application  is accepted, if the submitter took the task to work on it.

    metadataDescription String? //Application description
    metadataProposedBudget String? //Percentage of how much of the budget the user is asking for
    metadataAdditionalLink String?
    metadataDisplayName String? // The name that the user wants to show in his application

    timestamp String //Timestamp Unix global in seconds of when the event was emitted;

    transactionHash String //The hash of the transaction that emitted the vent
    blockNumber     String @default("0")

    taskId String  
    task   Task  @relation(fields: [taskId], references: [taskId])

    createdAt    DateTime  @default(now())
    updatedAt    DateTime? @updatedAt

    @@unique([taskId, applicationId]) //cannot exist application with same taskId and applicationId
    @@map("application")
}

model Submission {
    id String @id @default(uuid())

    submissionId String //Submission id onchain
    metadata String //The metadata hash
    proposer String //Proposer
    applicant String //Applicant

    accepted Boolean @default(false) //If the application was accepted
    reviewed Boolean @default(false) //If the application was reviewed

    review String? //The review outcome of this submission -> { None, Accepted, Rejected } -> 0, 1, 2

    metadataDescription String? //Application description
    metadataAdditionalLinks String[] @default([])

    metadataReviewFeedback String? //If its submission was reviewed, what was the feedback?
    metadataReview String? //If its submission was reviewed, what was the metadataHash
    timestampReview String? //If its submission was reviewed, what was the timestamp
    executorReview  String? //If its submission was reviewed, what was the executor

    timestamp String //Timestamp Unix global in seconds of when the event was emitted;

    transactionHash String //The hash of the transaction that emitted the vent
    blockNumber     String @default("0")

    taskId String  
    task   Task  @relation(fields: [taskId], references: [taskId])

    createdAt    DateTime  @default(now())
    updatedAt    DateTime? @updatedAt

    @@unique([taskId, submissionId]) //cannot exist submission with same taskId and submissionId
    @@map("submission")
}

//events emitted by the smart-contracts
model Event {
  id String @id @default(uuid())

  name String  //The event name
  data String  //The event data

  eventIndex String? //The logIndex
  transactionHash String? //The transaction hash
  blockNumber     String @default("0")

  taskId String? //If the event is related to a task

  address String? //Address related to the event (msg.sender / application sender etc)

  timestamp String? //Timestamp Unix global in seconds of when the event was emitted;

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@unique([eventIndex, transactionHash, blockNumber]) //cannot exist event with same event info and transactionHash
  @@map("event")
}


//Users of the protocol
model User {
  id String @id @default(uuid())

  name String?   //The user display name
  address String? @unique //The user address

  profilePictureHash String? //The user profile picture - ipfs hash
  tags  String[] @default([]) //The user tags - "Data managment"; "Frontend"... etc
  links String [] @default([]) //The user links

  joinedSince String? //Timestamp Unix Global in seconds of when the user joined the protocol

  updatesNonce String @default("0") //Nonce that managens everytime a profile update is done, to control the message signing.

  VerifiedContributorSubmission VerifiedContributorSubmission[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("user")
}

//To become a verified-contributor, an user can submit a request.
model VerifiedContributorSubmission {
  id String @id @default(uuid())

  description String? //"Please give us some details about your qualifications to be a Verified Contributor"

  links String [] @default([]) //The submission links

  githubLogin String? //Ex: bruno353
  githubHTMLUrl String? //Ex: https://github.com/bruno353
  githubId String? //Ex: 82957886
  githubName String? //Ex: Bruno Santos
  githubEmail String? //Ex: tibiapro58@gmail.com
  githubAccessToken String?

  status String @default("pending") //the stauts of application - pending, approved, recused.

  userId String  
  user   User  @relation(fields: [userId], references: [id])

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("verifiedContributorSubmission")
}