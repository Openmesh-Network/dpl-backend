generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model Task {
  id String @id @default(uuid())

  taskId String  @unique //The id of the task onchain

  status String? //The task status -> 0, 1 or 2 - ['open', 'active', 'completed']

  type String? @default("Individual") //the type of the task -> individual or group

  skills String[] @default([]) //the skills of this task. ex: Frontend, Backend, Solidity

  skillsSearch String? //parameter mandatory to execute case insensitive searchs on the database - additional paramater to facilitate the searchs on database

  departament String?   //the departament of the task

  deadline String? //the task deadline in Unix timestamp

  description String? //task desc

  title String? //task title

  file String? //The file hash on ipfs (if its got any file linked to the task)

  links String[] //["{"title": "My video","url": "https://www.youtube.com/watch?v=zizonToFXDs"}"]

  applications String @default("[]") //A stringified array opf applications for the task -> struct OffChainApplication {address applicant; bool accepted; Reward[] reward;}

  payments Payment[]

  estimatedBudget String @default("0") //getting the value from the tokens we return the estimated budget in USD.

  contributorsNeeded String @default("1") //number of contributors need

  projectLength String @default("Less than 1 week") //How much time is estimated to complete the task 

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("task")
}

model Payment {
    id String @id @default(uuid())

    tokenContract String //the token contract of the payment task
    amount String //The amount
    decimals String //Decimals of the smart-contract token

    taskId String  
    task   Task  @relation(fields: [taskId], references: [id])

    createdAt    DateTime  @default(now())
    updatedAt    DateTime? @updatedAt

    @@map("payment")
}

//events emitted by the smart-contracts
model Event {
  id String @id @default(uuid())

  name String  //The event name
  data String  //The event data

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("event")
}