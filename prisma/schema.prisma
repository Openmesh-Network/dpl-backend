generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model OpenmeshExpertUser {
  id       String @id @default(uuid())

  // AS THE USER CAN LOGIN EITHER WITH EMAIL + PASSWORD or WITH WEB3 LOGIN (SINGING A MESSAGE WITH ITS WALLET) - BOTH EMAIL AND PASSWORD CAN BE OPTIONAL (AS THE WEB3 ADDRESS)
  email    String? @unique //unique
  password String?
  web3Address String? @unique

  updatesNonce String @default("1") //Nonce that managens everytime a profile signin is done, to control the message signing.

  equinixAPIKey String? // Need to get rid of all these API keys if possible!
  aivenAPIKey String?
  aivenAPIServiceUriParams String?
  validationCloudAPIKeyEthereum String?
  validationCloudAPIKeyPolygon String?

  companyName String?
  firstName String?
  lastName String?
  foundingYear Int?
  location String?
  website String?
  personalBlog String?
  githubLink String?
  tags String[]
  description String?
  scheduleCalendlyLink String?
  profilePictureHash String?
  walletAddress String? //when registering to become a verified contributor, user can input its wallet.
  isCompany Boolean @default(false) //if its not, it means its a individual.

  scheduleCall Boolean @default(false)

  userEnabled     Boolean @default(true)

  registrationByVerifiedContributor   Boolean @default(false) //if the user registred to become a verified contributor

  confirmedEmail       Boolean?  @default(false)
  hashConfirmEmail    String?
  registrationByOpenRD Boolean @default(false) // if the user registered through the openrd plataform. 
  timestampCodeEmail  String?   

  pageRedirect  String?

  RecoverPassword     RecoverPassword[]
  Deployment          Deployment[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  @@map("openmeshExpertUser")
}

model Session {

  id       String @id @default(uuid())
  sessionToken String   

  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  @@map("session")

}

model RecoverPassword { 
  id String @id @default(uuid())

  email     String
  txid      String @unique
  timeStamp String
  isValid   Boolean @default(true)

  
  openmeshExpertUserId String   
  openmeshExpertUser   OpenmeshExpertUser  @relation(fields: [openmeshExpertUserId], references: [id])
   
  createdAt     DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("recoverPassword")
}

// Maybe rename to Xnode_Deployment to avoid confusion
model Deployment {
  id String @id @default(uuid())
  accessToken   String // Preshared Key
  provider      String?
  services      String? // should be named config or similar. Will eventually become config_remote (git remote url)
  heartbeatData String?
  name          String?
  description   String?
  location      String?

  status        String?

  ipAddress      String // Ip address of the provisioned machine
  deploymentAuth String // Either their apiKey or the unit's nftTokenId

  isUnit         Boolean
  unitClaimTime  DateTime? // Tracks when the unit was minted

  openmeshExpertUserId  String
  openmeshExpertUser    OpenmeshExpertUser @relation(fields: [openmeshExpertUserId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@map("deployment")
}
